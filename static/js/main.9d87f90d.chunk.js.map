{"version":3,"sources":["logo.svg","components/projectCard.js","components/projectContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","maxWidth","media_media","width","height","transform","transformOrigin","overflow","media_container","maxHeight","wrap","ProjectCard","props","classes","openProjectPage","window","open","url","Card","className","CardActionArea","onClick","CardMedia","media","component","src","title","CardContent","Typography","gutterBottom","variant","color","description","CardActions","Button","size","source","projectGrid","marginTop","ProjectContainer","projects","undefined","Grid","container","spacing","justify","cards","forEach","project","index","push","item","xs","sm","md","key","getProjectCards","theme","createMuiTheme","App","ThemeProvider","CssBaseline","Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d87f90d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport { CardActionArea, CardMedia, CardContent, Typography, Button, CardActions, Hidden, createMuiTheme } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 350,\r\n  },\r\n  media_media: {\r\n    width: '1280px',\r\n    height: '768px',\r\n    transform: `scale(${350 / 1280}, ${250 / 768})`,\r\n    transformOrigin: '0 0',\r\n    overflow: 'hidden',\r\n  },\r\n  media_container: {\r\n    maxWidth: 350,\r\n    maxHeight: 200,\r\n    overflow: 'hidden',\r\n  },\r\n  wrap: {\r\n    width: 350,\r\n    height: 250,\r\n  }\r\n})\r\n\r\nexport default function ProjectCard(props) {\r\n\r\n  const classes = useStyles()\r\n\r\n  const openProjectPage = () => {\r\n    window.open(props.url, '_blank')\r\n  }\r\n\r\n  const openSourcePage = () => {\r\n    window.open(props.source, '_blank')\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={openProjectPage}>\r\n        <div className={classes.wrap}>\r\n          <CardMedia\r\n            classes={{ media: classes.media_media }}\r\n            component=\"iframe\"\r\n            src={props.url}\r\n            title={props.title}></CardMedia>\r\n        </div>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h6\">\r\n            {props.title}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {props.description}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button onClick={openProjectPage} size=\"small\" color=\"primary\">Open</Button>\r\n        <Button onClick={openSourcePage} size=\"small\" color=\"primary\">View Source</Button>\r\n      </CardActions>\r\n    </Card>)\r\n}","import React from 'react'\r\nimport {\r\n  Grid\r\n} from '@material-ui/core'\r\nimport {\r\n  makeStyles\r\n} from '@material-ui/core/styles'\r\n\r\nimport ProjectCard from './projectCard'\r\n\r\nconst useStyles = makeStyles({\r\n  projectGrid: {\r\n    marginTop: '10vh',\r\n  },\r\n})\r\n\r\nfunction getProjectCards(projects) {\r\n  let cards = []\r\n  projects.forEach((project, index) => {\r\n    cards.push(\r\n      <Grid item xs={12} sm={6} md={4} key={`project-card-${index}`}>\r\n        <ProjectCard\r\n          {...project}\r\n        ></ProjectCard>\r\n      </Grid>\r\n    )\r\n  })\r\n  return cards\r\n}\r\n\r\nexport default function ProjectContainer(props) {\r\n  const classes = useStyles()\r\n  \r\n  const projects = props.projects == undefined ? [] : props.projects\r\n  return (\r\n    <Grid className={classes.projectGrid} container spacing={2} justify=\"center\">\r\n      {getProjectCards(projects)}\r\n    </Grid>\r\n  )\r\n}\r\n\r\n{/* <Grid item xs={12} sm={6} md={4}>\r\n<ProjectCard\r\n  thumbnail=\"https://i.pximg.net/img-original/img/2020/08/08/19/54/07/83531968_p0.jpg\"\r\n  title=\"Test component\"\r\n  description=\"adlfa sdfas dfa sdv asdv asdvasdv asdv asdvasd vasdva sdva sdv asdv asd vas dv asdv \"\r\n  url=\"https://despel.dev/coding-speedruns/1%20counter/\"\r\n></ProjectCard>\r\n</Grid> */}","import React from 'react';\nimport logo from './logo.svg';\n\nimport {\n  Container, CssBaseline, ThemeProvider\n} from '@material-ui/core'\nimport {\n  createMuiTheme\n} from '@material-ui/core/styles'\n\nimport './App.css';\n\nimport ProjectContainer from './components/projectContainer'\n\nconst projects = [\n  {\n    title: 'Counter',\n    description: '',\n    url: 'https://despel.github.io/coding-speedruns/1%20counter/',\n    source:'https://github.com/DESPEL/coding-speedruns/tree/master/1%20counter'\n  },\n  {\n    title: 'Random color changer',\n    description: '',\n    url: 'https://despel.github.io/coding-speedruns/2%20random_color',\n    source:'https://github.com/DESPEL/coding-speedruns/tree/master/2%20random_color'\n  },\n  {\n    title: 'Hardcoded reviews',\n    description: '',\n    url: 'https://despel.github.io/coding-speedruns/3%20hardcoded_reviews',\n    source:'https://github.com/DESPEL/coding-speedruns/tree/master/3%20hardcoded_reviews'\n  },\n  {\n    title: 'Navbar',\n    description: '',\n    url: 'https://despel.github.io/coding-speedruns/4%20navbar',\n    source:'https://github.com/DESPEL/coding-speedruns/tree/master/4%20navbar'\n  },\n  {\n    title: 'Sidebar',\n    description: '',\n    url: 'https://despel.github.io/coding-speedruns/5%20sidebar',\n    source:'https://github.com/DESPEL/coding-speedruns/tree/master/5%20sidebar'\n  },\n]\n\nconst theme = createMuiTheme({\n  \n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container>\n          <ProjectContainer\n            projects={projects}\n          />\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}